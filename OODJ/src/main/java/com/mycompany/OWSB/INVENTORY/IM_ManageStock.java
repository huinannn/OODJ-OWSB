/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.INVENTORY;

import com.mycompany.OWSB.SALES.Items;
import com.mycompany.OWSB.SALES.Sales_EditItem;
import javax.swing.*;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.LinkedHashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Calendar;
import java.util.HashMap;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
/**
 *
 * @author ooijinghui
 */
public class IM_ManageStock extends javax.swing.JPanel {
    /**
     * Creates new form IM_ManageStock
     */
    public IM_ManageStock() {
        initComponents();
        loadStockDataIntoTable();
        
        JComboBox<String> comboBox = new JComboBox<>();
        comboBox.addItem("Approved");
        comboBox.addItem("Disclaimed");
        comboBox.addItem("Pending");
        jTable1.getColumnModel().getColumn(9).setCellEditor(new DefaultCellEditor(comboBox));
        jTable1.revalidate();
        jTable1.repaint();
    }
    private List<Stock> stockList;

private void loadStockDataIntoTable() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[][] {},
        new String[] {
            "Stock ID", "PO ID", "Item ID", "Item Name", "Quantity Delivered",
            "Supplier Name", "Stock Arrival Date", "Previous Stock Quantity", "Current Stock Quantity",
             "Stock Approval Status", "Approve Date", "Payment Status"
        }
    ) {
        @Override
        
        public boolean isCellEditable(int row, int column) {
            Object paymentStatus = getValueAt(row, 11); // PaymentStatus column
            if (paymentStatus != null && "Paid".equalsIgnoreCase(paymentStatus.toString())) {
                // No cells editable if payment is Approved
                return false;
            }
            // Otherwise only Stock Approval Status (column 9) editable
            return column == 9;
        }

    };

    stockList = Stock.viewStockInFile(); // assign to class field, not local

    for (Stock stock : stockList) {
        Object[] rowData = {
            stock.getStockID(),
            stock.getPoID(),
            stock.getItemID(),
            stock.getItemName(),
            stock.getNewStockQuantity(),
            stock.getSupplier(),
            stock.getStockArrivalDate(),
            stock.getItemPreviousQuantity(),
            stock.getItemCurrentQuantity(),
            stock.getStockApprovalStatus(),
            stock.getStockApprovalDate(),
            stock.getPaymentStatus()
        };
        model.addRow(rowData);
    }

    jTable1.setModel(model);

    // Set editor here after model is set
    JComboBox<String> comboBox = new JComboBox<>();
    comboBox.addItem("Approved");
    comboBox.addItem("Disclaimed");
    comboBox.addItem("Pending");
    jTable1.getColumnModel().getColumn(9).setCellEditor(new DefaultCellEditor(comboBox));
    jTable1.revalidate();
    jTable1.repaint();
}





    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Save_InventoryBtn = new javax.swing.JButton();
        Inventory_Label1 = new javax.swing.JLabel();
        GenerateReportBtn = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stock ID", "PO ID", "Item ID", "Stock Quantity", "Supplier", "Stock Arrival Date", "Previous Quantity", "Current Quantity", "Stock Approval Status", "Stock Approval Date", "Payment Status"
            }
        ));
        javax.swing.JComboBox<String> comboBox = new javax.swing.JComboBox<>();
        comboBox.addItem("Approved");
        comboBox.addItem("Disclaimed");
        comboBox.addItem("Pending");

        jTable1.getColumnModel().getColumn(9).setCellEditor(new javax.swing.DefaultCellEditor(comboBox));
        jScrollPane1.setViewportView(jTable1);

        Save_InventoryBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        Save_InventoryBtn.setText("Save");
        Save_InventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_InventoryBtnActionPerformed(evt);
            }
        });

        Inventory_Label1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        Inventory_Label1.setText("Stock Arrived");

        GenerateReportBtn.setText("Generate Report");
        GenerateReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateReportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(Inventory_Label1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(GenerateReportBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Save_InventoryBtn)
                        .addGap(16, 16, 16))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Inventory_Label1, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(Save_InventoryBtn)
                    .addComponent(GenerateReportBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    


    private void Save_InventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_InventoryBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int rowCount = model.getRowCount();
    String today = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));

    List<String> updatedLines = new ArrayList<>();
    // Add header line
    updatedLines.add("StockID;POID;ItemID;ItemName;NewStockQuantity;TotalPrice;Supplier;StockArrivalDate;ItemPreviousQuantity;ItemCurrentQuantity;StockApprovalStatus;StockApprovalDate;PaymentStatus");
    
    // Load existing data into a map by StockID (index 0)
    Map<String, String> existingStockMap = new HashMap<>();
    try (BufferedReader br = new BufferedReader(new FileReader("Stock.txt"))) {
        String line = br.readLine(); // Skip header line
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(";");
            if (parts.length >= 13) { // Make sure line has at least 13 fields
                String stockId = parts[0].trim();
                existingStockMap.put(stockId, line);
                
            }
        }
    } catch (IOException e) {
        // File not found or error reading, handle if needed
        JOptionPane.showMessageDialog(this, "Error reading Stock.txt: " + e.getMessage());
    }


    for (int i = 0; i < rowCount; i++) {
        String stockID = safeToString(model.getValueAt(i, 0)).trim();
        if (stockID.isEmpty()) continue;

        String existingLine = existingStockMap.get(stockID);
        boolean isPaid = false;

        if (existingLine != null) {
            String[] parts = existingLine.split(";");
            if (parts.length >= 13 && "Paid".equalsIgnoreCase(parts[12].trim())) {
                isPaid = true;
            }
        }

        if (isPaid) {
    updatedLines.add(existingLine);

    if (existingLine != null) {
        String[] parts = existingLine.split(";");
        int colCount = model.getColumnCount();

        int tableCol = 0; // Column index for the table
        for (int iPart = 0; iPart < parts.length && tableCol < colCount; iPart++) {
            if (iPart == 5) {
                continue; // Skip column 5 (parts[5])
            }

            model.setValueAt(parts[iPart], i, tableCol);
            tableCol++;
        }
    }


        } else {
            // Otherwise update based on current table data

            // Defensive: check stockList size and alignment with table rows
            Stock stock = null;
            if (stockList != null && i < stockList.size()) {
                stock = stockList.get(i);
            } else {
                JOptionPane.showMessageDialog(this, "Mismatch between table rows and stock list.");
                return;
            }

            String poID = safeToString(model.getValueAt(i, 1));
            String itemID = safeToString(model.getValueAt(i, 2));
            String itemName = safeToString(model.getValueAt(i, 3));
            String newStockQty = safeToString(model.getValueAt(i, 4));
            String totalPrice = Double.toString(stock.getTotalPrice());
            String supplier = safeToString(model.getValueAt(i, 5));
            String arrivalDate = safeToString(model.getValueAt(i, 6));
            String prevQty = safeToString(model.getValueAt(i, 7));
            String currQty = safeToString(model.getValueAt(i, 8));
            String approvalStatus = safeToString(model.getValueAt(i, 9));

            String approvalDate = "-";
            String paymentStatus = "-";

            switch (approvalStatus.toLowerCase()) {
                case "disclaimed":
                    paymentStatus = "Disclaimed";
                    break;
                case "approved":
                    approvalDate = today;
                    paymentStatus = "Unpaid";
                    int qty = Integer.parseInt(newStockQty);
//                    addStock(itemID, qty);
                    break;
                case "pending":
                    paymentStatus = "Unpaid";
                    break;
                default:
                    paymentStatus = "Unpaid";
            }

            // Update table model to reflect new status safely
            if (11 < model.getColumnCount()) {
                model.setValueAt(approvalDate, i, 10); // StockApprovalDate column
            }
            if (12 < model.getColumnCount()) {
                model.setValueAt(paymentStatus, i, 11); // PaymentStatus column
            }

            String line = String.join(";",
                    stockID, poID, itemID, itemName, newStockQty,
                    totalPrice, supplier, arrivalDate, prevQty, currQty,
                    approvalStatus, approvalDate, paymentStatus
            );

            updatedLines.add(line);
            
            
        }
    }

    // Write all lines back to the file
    try (PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("Stock.txt")))) {
        for (String line : updatedLines) {
            pw.println(line);
        }
        JOptionPane.showMessageDialog(this, "Stock approval statuses saved successfully.");
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving Stock.txt: " + e.getMessage());
    }
    
    
    
}
    
private void addStock(String stockID, String itemID, int quantity) {
    Items item = Sales_EditItem.getItemByCode(itemID);
    if (item != null && stockID != null){
        //Add Stock
        int currentQuantity = item.getStockCurrentQuantities();
        item.setStockCurrentQuantities(currentQuantity + quantity);

        Sales_EditItem.editItemsInFile(itemID, item);

    } else {
        System.out.println("Item with code " + itemID + " not found.");
    }
}

// Helper function you should define somewhere in your class
private String safeToString(Object obj) {
    return obj == null ? "" : obj.toString();
    }//GEN-LAST:event_Save_InventoryBtnActionPerformed
private void generateMonthlyReport(int month, int year) {
    File file = new File("Stock.txt");
    if (!file.exists()) {
        JOptionPane.showMessageDialog(this, "Stock.txt not found!");
        return;
    }

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    DateTimeFormatter reportDateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    LocalDate today = LocalDate.now();

    List<String> reportLines = new ArrayList<>();
    
    // Add report header
    reportLines.add("---------------------------------------------------------------");
    reportLines.add("                     MONTHLY STOCK REPORT");
    reportLines.add(String.format("                 Month: %s %d", getMonthName(month), year));
    reportLines.add("---------------------------------------------------------------");
    reportLines.add("");
    
    // Add column headers with spacing (adjust widths as needed)
    String header = String.format(
        "%-8s | %-7s | %-7s | %-18s | %-13s | %-15s | %-12s | %-15s | %-13s | %-14s",
        "Stock ID", "PO ID", "Item ID", "Item Name", "Qty Delivered", "Supplier",
        "Arrival Date", "Approval Status", "Approval Date", "Payment Status");
    reportLines.add(header);
    reportLines.add("-------------------------------------------------------------------------------------------------------------------------------");
    
    int totalEntries = 0;
    int totalQuantity = 0;
    
    try (BufferedReader br = new BufferedReader(new FileReader(file))) {
        String line = br.readLine(); // skip header
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(";");
            if (parts.length < 13) continue;

            String stockID = parts[0];
            String poID = parts[1];
            String itemID = parts[2];
            String itemName = parts[3];
            String qtyDeliveredStr = parts[4];
            String supplier = parts[6];
            String arrivalDateStr = parts[7];
            String approvalStatus = parts[10];
            String approvalDate = parts[11];
            String paymentStatus = parts[12];

            // Parse arrival date to filter by month/year
            
            try {
                LocalDate arrivalDate = LocalDate.parse(arrivalDateStr, formatter);
                if (arrivalDate.getMonthValue() == month && arrivalDate.getYear() == year &&
                    approvalStatus.equalsIgnoreCase("APPROVED")) {

                    int qtyDelivered = Integer.parseInt(qtyDeliveredStr);
                    totalEntries++;
                    totalQuantity += qtyDelivered;

                    String row = String.format(
                        "%-8s | %-7s | %-7s | %-18s | %-13d | %-15s | %-12s | %-15s | %-13s | %-14s",
                        stockID, poID, itemID, truncateString(itemName, 18), qtyDelivered, truncateString(supplier, 15),
                        arrivalDateStr, approvalStatus, approvalDate, paymentStatus);
                    reportLines.add(row);
                }
            } catch (Exception e) {
                // Skip invalid date or number
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading Stock.txt: " + e.getMessage());
        return;
    }

    reportLines.add("---------------------------------------------------------------");
    reportLines.add(String.format("Total Stock Entries: %d", totalEntries));
    reportLines.add(String.format("Total Quantity Delivered: %d", totalQuantity));
    reportLines.add("---------------------------------------------------------------");
    reportLines.add("");
    reportLines.add("Report generated on: " + today.format(reportDateFormatter));

    // Prepare filename with month name and year
    String reportFileName = getMonthName(month) + year + "StockReport.txt";

    try (PrintWriter pw = new PrintWriter(new FileWriter(reportFileName))) {
        for (String line : reportLines) {
            pw.println(line);
        }
        JOptionPane.showMessageDialog(this, "Monthly report generated successfully: " + reportFileName);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error writing report file: " + e.getMessage());
    }

}

private String getMonthName(int month) {
    return java.time.Month.of(month).name().substring(0,1) + java.time.Month.of(month).name().substring(1).toLowerCase();
}

private String truncateString(String str, int maxLength) {
    if (str.length() <= maxLength) return str;
    else return str.substring(0, maxLength-3) + "...";
}




    private void GenerateReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateReportBtnActionPerformed
    try {
        String monthStr = JOptionPane.showInputDialog(this, "Enter month (1-12):");
        if (monthStr == null) return; // User cancelled

        int month = Integer.parseInt(monthStr);
        if (month < 1 || month > 12) {
            JOptionPane.showMessageDialog(this, "Invalid month entered.");
            return;
        }

        String yearStr = JOptionPane.showInputDialog(this, "Enter year (e.g., 2025):");
        if (yearStr == null) return; // User cancelled

        int year = Integer.parseInt(yearStr);
        if (year < 1900 || year > 3000) {
            JOptionPane.showMessageDialog(this, "Invalid year entered.");
            return;
        }

        generateMonthlyReport(month, year);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input format for month or year.");
    }
    }//GEN-LAST:event_GenerateReportBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GenerateReportBtn;
    private javax.swing.JLabel Inventory_Label1;
    private javax.swing.JButton Save_InventoryBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
