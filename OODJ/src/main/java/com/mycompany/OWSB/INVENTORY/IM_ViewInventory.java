/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.INVENTORY;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 *
 * @author ooijinghui
 */
public class IM_ViewInventory extends javax.swing.JPanel {

    /**
     * Creates new form IM_ViewInventory
     */
    public IM_ViewInventory() {
        initComponents();
        loadInventoryData();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Inventory_Label = new javax.swing.JLabel();
        Save_InventoryBtn = new javax.swing.JButton();
        SortBtn = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(709, 10));

        jTable1.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Item ID", "Item Name", "Category", "Quantities", "Reorder Level", "Reorder Alert"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class, Integer.class, Integer.class, String.class
            };

            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true // Only Reorder Level and Reorder Alert editable
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        javax.swing.JComboBox<String> comboBox = new javax.swing.JComboBox<>();
        comboBox.addItem("LOW STOCK");
        comboBox.addItem("STOCK READY");

        jTable1.getColumnModel().getColumn(5).setCellEditor(new javax.swing.DefaultCellEditor(comboBox));
        jTable1.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jScrollPane1.setViewportView(jTable1);

        Inventory_Label.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        Inventory_Label.setText("Inventory");

        Save_InventoryBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        Save_InventoryBtn.setText("Save");
        Save_InventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_InventoryBtnActionPerformed(evt);
            }
        });

        SortBtn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
            "Sort by Item ID", "Low Stock", "Stock Prepared"
        }));
        SortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(Inventory_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Save_InventoryBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Inventory_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Save_InventoryBtn)
                    .addComponent(SortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
private void filterAndDisplayInventory() {
    String selected = (String) SortBtn.getSelectedItem();
    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear current table rows

    java.util.List<Object[]> filteredList = new java.util.ArrayList<>();

    for (String[] data : fullInventoryData.values()) {
        try {
            String itemID = data[0];
            String itemName = data[1];
            String category = data[2];
            int quantity = Integer.parseInt(data[3]);
            int reorderLevel = Integer.parseInt(data[4]);
            String reorderAlert = data[6];

            // Apply filter based on selection
            if (selected.equals("Low Stock") && quantity >= reorderLevel) continue;
            if (selected.equals("Stock Prepared") && quantity < reorderLevel) continue;

            filteredList.add(new Object[] {
                itemID, itemName, category, quantity, reorderLevel, reorderAlert
            });
        } catch (NumberFormatException e) {
            // Skip invalid row
        }
    }

    // Sort by Item ID if selected
    if (selected.equals("Sort by Item ID")) {
        filteredList.sort((a, b) -> ((String) a[0]).compareTo((String) b[0]));
    }

    // Re-populate table
    for (Object[] row : filteredList) {
        model.addRow(row);
    }
}

    private void Save_InventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_InventoryBtnActionPerformed
        if (jTable1.isEditing()) {
        jTable1.getCellEditor().stopCellEditing();
    }

    javax.swing.table.TableModel model = jTable1.getModel();

    // Update fullInventoryData with edits from the visible rows
    for (int i = 0; i < model.getRowCount(); i++) {
        String itemID = (String) model.getValueAt(i, 0);
        String itemName = (String) model.getValueAt(i, 1);
        String category = (String) model.getValueAt(i, 2);
        int quantity = Integer.parseInt(model.getValueAt(i, 3).toString());
        int reorderLevel = Integer.parseInt(model.getValueAt(i, 4).toString());
        String reorderAlert = (String) model.getValueAt(i, 5);

        // Preserve description from fullInventoryData (or use empty if missing)
        String[] originalData = fullInventoryData.get(itemID);
        String description = "";
        if (originalData != null && originalData.length >= 7) {
            description = originalData[5]; // original description index (5)
        }

        // Update the fullInventoryData map with edited data for this item
        // Format: [ItemCode, ItemName, Category, StockCurrentQuantities, ReorderLevel, Description, ReorderAlertStatus]
        fullInventoryData.put(itemID, new String[] {
            itemID,
            itemName,
            category,
            String.valueOf(quantity),
            String.valueOf(reorderLevel),
            description,
            reorderAlert
        });
    }

    // Now save the fullInventoryData to file
    try (BufferedWriter bw = new BufferedWriter(new FileWriter("../OODJ_My_Code/database/Inventory.txt"))) {
        // Write header
        bw.write("ItemCode;ItemName;Category;StockCurrentQuantities;ReorderLevel;Description;ReorderAlertStatus");
        bw.newLine();

        // Write all inventory data (not just visible rows)
        for (String[] rowData : fullInventoryData.values()) {
            String line = String.join(";", rowData);
            bw.write(line);
            bw.newLine();
        }
        bw.flush();
        javax.swing.JOptionPane.showMessageDialog(this, "Inventory saved successfully.");
    } catch (IOException e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error saving inventory: " + e.getMessage());
        return;
    }

    // Reload full data from file
    fullInventoryData.clear();
    loadInventoryData();

    // Reapply the current filter to reflect the updated data in the table
    SortBtnActionPerformed(null);
    }//GEN-LAST:event_Save_InventoryBtnActionPerformed

    private void SortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortBtnActionPerformed
        filterAndDisplayInventory();
    }//GEN-LAST:event_SortBtnActionPerformed
private java.util.Map<String, String[]> fullInventoryData = new java.util.HashMap<>();


private void loadInventoryData() {
    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear existing data
    fullInventoryData.clear();

    try (BufferedReader br = new BufferedReader(new FileReader("../OODJ_My_Code/database/Inventory.txt"))) {
        String line;
        boolean skipHeader = true;
        while ((line = br.readLine()) != null) {
            if (skipHeader) {
                skipHeader = false;
                continue;
            }

            String[] parts = line.split(";", -1);  // -1 to keep trailing empty strings
            if (parts.length >= 7) {
                String itemID = parts[0];
                fullInventoryData.put(itemID, parts);

                // Add only required fields to table
                String itemName = parts[1];
                String category = parts[2];
                int quantity = Integer.parseInt(parts[3]);
                int reorderLevel = Integer.parseInt(parts[4]);
                String reorderAlert = parts[6];

                model.addRow(new Object[] {
                    itemID, itemName, category, quantity, reorderLevel, reorderAlert
                });
            }
        }
    } catch (IOException | NumberFormatException e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading inventory: " + e.getMessage());
    }
}




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Inventory_Label;
    private javax.swing.JButton Save_InventoryBtn;
    private javax.swing.JComboBox<String> SortBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
