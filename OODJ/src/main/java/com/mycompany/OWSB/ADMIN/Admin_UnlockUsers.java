
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.ADMIN;

import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author cindy
 */
public class Admin_UnlockUsers extends javax.swing.JPanel {
    private javax.swing.JPanel ChangePanel;
    private DefaultTableModel Table_Model;

    /**
     * Creates new form Admin_UnlockUsers
     */
    public Admin_UnlockUsers(javax.swing.JPanel ChangePanel) {
        this.ChangePanel = ChangePanel;
        initComponents();
        Setup_Table();
        Show_LockedUsers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UnlockUsers_Table = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 30)); // NOI18N
        jLabel1.setText("Unlock Users");

        UnlockUsers_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(UnlockUsers_Table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1)))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addGap(39, 39, 39))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void Setup_Table() {
        Table_Model = new DefaultTableModel(new String[]{"Employee ID", "Username", "Status", "Lock/Unlock"}, 0);
        UnlockUsers_Table.setModel(Table_Model);
        
        // Set row height
        UnlockUsers_Table.setRowHeight(30);
        
        // Set table design
        UnlockUsers_Table.setFont(new Font("Geogia", Font.PLAIN, 16)); // Change table font
        UnlockUsers_Table.getTableHeader().setFont(new Font("Georgia", Font.BOLD, 18)); // Change header font
        UnlockUsers_Table.setFont(new Font("Georgia", Font.PLAIN, 16));
        

        // Make the last column hold buttons
        UnlockUsers_Table.getColumn("Lock/Unlock").setCellRenderer(new Admin_UnlockUsers.ButtonRenderer());
        UnlockUsers_Table.getColumn("Lock/Unlock").setCellEditor(new Admin_UnlockUsers.ButtonEditor(new JCheckBox()));
    }
    
    private void Show_LockedUsers() {
        Table_Model.setRowCount(0); // Clear table before loading new data
        File file = new File("login.txt");

        if (file.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(",");
                    if (data.length >= 5 && "lock".equalsIgnoreCase(data[4])) {
                        Table_Model.addRow(new Object[]{data[0], data[1], data[4], "Unlock"});
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading file: " + e.getMessage());
            }
        }
        
        // Reset renderers/editors again after model is updated
        UnlockUsers_Table.getColumn("Lock/Unlock").setCellRenderer(new ButtonRenderer());
        UnlockUsers_Table.getColumn("Lock/Unlock").setCellEditor(new ButtonEditor(new JCheckBox()));
    }
    
    private void Unlock_User(String employeeId) {
        List<String> updatedLines = new ArrayList<>();
        File file = new File("login.txt");

        if (file.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] sec = line.split(",");
                    if (sec.length >= 5 && sec[0].equals(employeeId)) {
                        sec[3] = "0";  // Reset attempts
                        sec[4] = "unlock"; // Unlock account
                        JOptionPane.showMessageDialog(this, "User " + employeeId + " has been unlocked.");
                    }
                    updatedLines.add(String.join(",", sec));
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading file: " + e.getMessage());
                return;
            }

            // Write back updated content
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
                for (String updatedLine : updatedLines) {
                    bw.write(updatedLine);
                    bw.newLine();
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error updating file: " + e.getMessage());
            }
        }

    }
    
    // Renderer for buttons
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setText("Unlock");
            setFont(new Font("Georgia", Font.PLAIN, 14));
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return this;
        }
    }
    
    // Editor for buttons (handles button clicks)
    class ButtonEditor extends DefaultCellEditor {
        private JButton button;
        private String employeeId;
        private boolean isClicked;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Unlock");
            button.addActionListener((ActionEvent e) -> {
                if (isClicked) {
                    int option = JOptionPane.showConfirmDialog(null, "Unlock this user?", "Confirm", JOptionPane.YES_NO_OPTION);
                    if (option == JOptionPane.YES_OPTION) {
                        Unlock_User(employeeId);
                    } else {
                        JOptionPane.showMessageDialog(null, "User " + employeeId + " remains locked.");
                    }
                    
                    // Force editor to stop and commit changes
                    fireEditingStopped();
                    
                    // Refresh the table safely after editing is finished
                    SwingUtilities.invokeLater(() -> Show_LockedUsers());
                }
            });
        }
        
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            employeeId = table.getValueAt(row, 0).toString(); // Get Employee ID
            isClicked = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return "Unlock";
        }
        
        @Override
        public boolean stopCellEditing() {
            isClicked = false;
            return super.stopCellEditing();
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UnlockUsers_Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
