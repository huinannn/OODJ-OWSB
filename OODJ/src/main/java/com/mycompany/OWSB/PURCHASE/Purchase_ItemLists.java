/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.PURCHASE;

import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**s
 *
 * @author cindy
 */
public class Purchase_ItemLists extends javax.swing.JPanel {
    private javax.swing.JPanel ChangePanel;

    /**
     * Creates new form Purchase_ItemLists
     */
    public Purchase_ItemLists(javax.swing.JPanel ChangePanel) {
        this.ChangePanel = ChangePanel;
        initComponents();
        loadItemListFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ItemList_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Item_Table = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        ItemList_Label.setFont(new java.awt.Font("Comic Sans MS", 1, 30)); // NOI18N
        ItemList_Label.setText("Item List");

        Item_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(Item_Table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(ItemList_Label)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(ItemList_Label)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadItemListFromFile() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[] {
            "ID", "Name", "Supplier", "Category", "Quantity", "Description", "Reorder Alert"
        });
        
        Map<String, List<String>> itemSupplierMap = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader("database/Supplier.txt"))) {
            String line;
            br.readLine();
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(";");
                    if (parts.length >= 7) {
                        String supplierID = parts[0];
                        String supplierName = parts[1];
                        String itemSuppliedField = parts[6]; 
                        String[] itemParts = itemSuppliedField.split(":");
                        if (itemParts.length > 0) {
                            String itemID = itemParts[0].trim();
                            String supplierEntry = supplierID + "-" + supplierName;
                            itemSupplierMap
                                .computeIfAbsent(itemID, k -> new ArrayList<>())
                                .add(supplierEntry);
                        }
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading Suppliers.txt: " + e.getMessage());
        }

        try (BufferedReader br = new BufferedReader(new FileReader("database/Inventory.txt"))) {
            String line;
            br.readLine();
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] data = line.split(";");
                    if (data.length == 7) {
                        String itemID = data[0];
                        String itemName = data[1];
                        String category = data[2];
                        String quantity = data[3];
                        String description = data[5];
                        String reorderAlert = data[6];

                        // Get supplier(s)
                        List<String> suppliers = itemSupplierMap.getOrDefault(itemID, new ArrayList<>());
                        String supplierHTML = "<html>" + String.join("<br>", suppliers) + "<html>";

                        model.addRow(new Object[] {
                            itemID, itemName, supplierHTML, category, quantity, description, reorderAlert
                        });
                    } else {
                        System.out.println("Skipping malformed line in Items.txt: " + line);
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading Items.txt: " + e.getMessage());
        }

        Item_Table.setModel(model);
        // Set font and row height
        Item_Table.setFont(new java.awt.Font("Georgia", java.awt.Font.PLAIN, 14)); // Font type and size
        Item_Table.setRowHeight(25); // Row height

        // Set column widths 
        Item_Table.getColumnModel().getColumn(0).setPreferredWidth(70);  // Item ID
        Item_Table.getColumnModel().getColumn(1).setPreferredWidth(100);  // Item Name
        Item_Table.getColumnModel().getColumn(2).setPreferredWidth(130); // Supplier
        Item_Table.getColumnModel().getColumn(3).setPreferredWidth(60);  // Category
        Item_Table.getColumnModel().getColumn(4).setPreferredWidth(60);  // Quantity
        Item_Table.getColumnModel().getColumn(6).setPreferredWidth(110);  // Description
        Item_Table.getColumnModel().getColumn(7).setPreferredWidth(90); // Reorder Alert

        Item_Table.getTableHeader().setFont(new java.awt.Font("Georgia", java.awt.Font.BOLD, 12));
        
        
        // Highlight "LOW STOCK" status in red
        Item_Table.getColumnModel().getColumn(6).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if ("LOW STOCK".equalsIgnoreCase(value.toString().trim())) {
                    c.setBackground(Color.RED);
                    c.setForeground(Color.WHITE);
                } else {
                    // Reset to default when not LOW STOCK
                    if (isSelected) {
                        c.setBackground(table.getSelectionBackground());
                        c.setForeground(table.getSelectionForeground());
                    } else {
                        c.setBackground(Color.WHITE);
                        c.setForeground(Color.BLACK);
                    }
                }

                return c;
            }
        });
        
        
        for (int row = 0; row < Item_Table.getRowCount(); row++){
            int maxHeight = Item_Table.getRowHeight();
            
            for (int col = 0; col < Item_Table.getColumnCount(); col++){
                TableCellRenderer renderer = Item_Table.getCellRenderer(row, col);
                Component comp = Item_Table.prepareRenderer(renderer, row, col);
                int height = comp.getPreferredSize().height;
                maxHeight = Math.max(height, maxHeight);
            }
            
            Item_Table.setRowHeight(row, maxHeight);
        }
        
        
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ItemList_Label;
    private javax.swing.JTable Item_Table;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
