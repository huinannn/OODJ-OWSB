/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.SALES;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

/**
 *
 * @author ooijinghui
 */
public class IM_Test extends javax.swing.JPanel {
    private java.util.Map<String, Items> fullInventoryData = new java.util.HashMap<>();
    /**
     * Creates new form IM_ViewInventory
     */
    public IM_Test() {
        initComponents();
        loadInventoryData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Inventory_Label = new javax.swing.JLabel();
        Save_InventoryBtn = new javax.swing.JButton();
        SortBtn = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(709, 10));

        jTable1.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Item ID", "Item Name", "Category", "Quantities", "Reorder Level", "Reorder Alert"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class, Integer.class, Integer.class, String.class
            };

            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true // Only Reorder Level and Reorder Alert editable
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        javax.swing.JComboBox<String> comboBox = new javax.swing.JComboBox<>();
        comboBox.addItem("LOW STOCK");
        comboBox.addItem("STOCK READY");

        jTable1.getColumnModel().getColumn(5).setCellEditor(new javax.swing.DefaultCellEditor(comboBox));
        jTable1.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jScrollPane1.setViewportView(jTable1);

        Inventory_Label.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        Inventory_Label.setText("Inventory");

        Save_InventoryBtn.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        Save_InventoryBtn.setText("Save");
        Save_InventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_InventoryBtnActionPerformed(evt);
            }
        });

        SortBtn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
            "Sort by Item ID", "Low Stock", "Stock Prepared"
        }));
        SortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(Inventory_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Save_InventoryBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Inventory_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Save_InventoryBtn)
                    .addComponent(SortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
private void filterAndDisplayInventory() {
    String selected = (String) SortBtn.getSelectedItem();
    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear current table rows

    List<Items> filteredList = new ArrayList<>(fullInventoryData.values());
    
    //Filter witeh Item Code, Low Stock, Stock Prepared
    if (null == selected) {
        filteredList.sort(Comparator.comparing(Items::getItemCode));
    } else switch (selected) {
        case "Item Code" -> filteredList.sort(Comparator.comparing(Items::getItemCode));
        case "Low Stock" -> filteredList.removeIf(item -> item.getStockCurrentQuantities() >= item.getReorderLevel());
        case "Stock Prepared" -> filteredList.removeIf(item -> item.getStockCurrentQuantities() < item.getReorderLevel());
        default -> filteredList.sort(Comparator.comparing(Items::getItemCode));
    }
    
     for (Items item : filteredList) {
        model.addRow(new Object[]{
            item.getItemCode(),
            item.getItemName(),
            item.getCategory().toString(),
            item.getStockCurrentQuantities(),
            item.getReorderLevel(),
            item.getReorderStatus().toString().replace("_", " ")
        });
    }
}

    private void Save_InventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_InventoryBtnActionPerformed
    if (jTable1.isEditing()) {
        jTable1.getCellEditor().stopCellEditing();
    }

    javax.swing.table.TableModel model = jTable1.getModel();

    // Update fullInventoryData with edits from the visible rows
    for (int i = 0; i < model.getRowCount(); i++) {
       String itemID = (String) model.getValueAt(i, 0);
            String itemName = (String) model.getValueAt(i, 1);
            Items.Category category = Items.Category.fromString(model.getValueAt(i,2).toString());
            int quantity = Integer.parseInt(model.getValueAt(i, 3).toString());
            int reorderLevel = Integer.parseInt(model.getValueAt(i, 4).toString());
            Items.ReorderAlertStatus status = Items.ReorderAlertStatus.fromString(model.getValueAt(i,5).toString());

        // Preserve description from fullInventoryData (or use empty if missing)
        // Update the fullInventoryData map with edited data for this item
        // Format: [ItemCode, ItemName, Category, StockCurrentQuantities, ReorderLevel, UnitPrice, Description, ReorderAlertStatus]
        Items updatedItem = new Items(itemID, itemName, category, quantity, reorderLevel, status);
        fullInventoryData.put(itemID, updatedItem);
    }
   
    // Now save the fullInventoryData to file (XC: I changed ur file path)
    try {
            String classPath = Items.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
            File baseDir = new File(classPath).getParentFile();
            File dbDir = new File(baseDir.getParentFile(), "database");
            File file = new File(dbDir, "Inventory.txt");
            
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
                // Write header
                bw.write("ItemCode;ItemName;Category;StockCurrentQuantities;ReorderLevel;UnitPrice;Description;ReorderAlertStatus");
                bw.newLine();
                
                // Write all sorted inventory data
                for (Items item : fullInventoryData.values()) {
                    String[] original = new String[] {
                        item.getItemCode(),
                        item.getItemName(),
                        item.getCategory().toString(),
                        String.valueOf(item.getStockCurrentQuantities()),
                        String.valueOf(item.getReorderLevel()),
                        String.valueOf(item.getUnitPrice()),
                        item.getDescription(),
                        item.getReorderStatus().toString().replace("_", " ")
                    };
                    bw.write(String.join(";", original));
                    bw.newLine();
                }

                bw.flush();
                javax.swing.JOptionPane.showMessageDialog(this, "Inventory saved successfully.");
            }
    } catch (Exception e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error saving inventory: " + e.getMessage());
    }
    // Reload full data from file
    filterAndDisplayInventory();
    
    }//GEN-LAST:event_Save_InventoryBtnActionPerformed

    private void SortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortBtnActionPerformed
        filterAndDisplayInventory();
    }//GEN-LAST:event_SortBtnActionPerformed




private void loadInventoryData() {
    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear existing data
    fullInventoryData.clear();
    
    
    //(XC: I changed ur file path)
    try {
        //Get Path
        String classPath = Items.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
        File baseDir = new File(classPath).getParentFile(); 

        File dbDir = new File(baseDir.getParentFile(), "database");
        if (!dbDir.exists()) {
            dbDir.mkdirs(); 
        }
        File file = new File(dbDir, "Inventory.txt");
        
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            boolean skipHeader = true;
            while ((line = br.readLine()) != null) {
                if (skipHeader) {
                    skipHeader = false;
                    continue;
                }

                String[] parts = line.split(";", -1);  // -1 to keep trailing empty strings
                 if (parts.length >= 8) {
                    String itemCode = parts[0];
                    String itemName = parts[1];
                    Items.Category category = Items.Category.fromString(parts[2]);
                    Items.ReorderAlertStatus status = Items.ReorderAlertStatus.fromString(parts[7]);
                    int quantity = Integer.parseInt(parts[3]);
                    int reorderLevel = Integer.parseInt(parts[4]);

                    Items item = new Items(itemCode, itemName, category, quantity, reorderLevel, status);
                    fullInventoryData.put(itemCode, item);
                    
                    // Add to table
                    model.addRow(new Object[]{itemCode, itemName, category.toString(), quantity, reorderLevel, status});
                }
            }
        }   
    } catch (Exception e){
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading inventory: " + e.getMessage());
        e.printStackTrace();
    }
}




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Inventory_Label;
    private javax.swing.JButton Save_InventoryBtn;
    private javax.swing.JComboBox<String> SortBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
