/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.PURCHASE;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author cindy
 */
public class Purchase_POLists extends javax.swing.JPanel {
    private javax.swing.JPanel ChangePanel;

    /**
     * Creates new form Purchase_POLists
     */
    public Purchase_POLists(javax.swing.JPanel ChangePanel) {
        this.ChangePanel = ChangePanel;
        initComponents();
        loadPOListFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        POList_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PO_Table = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        POList_Label.setFont(new java.awt.Font("Comic Sans MS", 1, 30)); // NOI18N
        POList_Label.setText("Purchase Order List");

        PO_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(PO_Table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(POList_Label)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(POList_Label)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadPOListFromFile() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[] {
            "PO ID", "Item ID", "Item Name", "Quantity", "Total Price", "Supplier", "Raised By", "Required Delivery Date", "Status", "Edit", "Delete"
        });
        
        Map<String, String> supplierMap = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader("database/Supplier.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(";");
                    if (parts.length >= 2) {
                        supplierMap.put(parts[0], parts[1]);   
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading Suppliers.txt: " + e.getMessage());
        }
        
        Map<String, String> empMap = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader("login.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(",");
                    if (parts.length >= 2) {
                        empMap.put(parts[0], parts[1]);   
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading login.txt: " + e.getMessage());
        }
        
        // Use the PO class viewPOsInFile() method
        List<PO> poList = PO.viewPOsInFile();

        for (PO po : poList) {
            String supplierID = po.getSupplierID();
            String supplierName = supplierMap.getOrDefault(supplierID, "Unknown");
            String supplierFull = supplierID + "-" + supplierName;

            String empID = po.getRaisedBy();
            String username = empMap.getOrDefault(empID, "Unknown");
            String raisedBy = empID + "-" + username;

            model.addRow(new Object[]{
                po.getPOID(),
                po.getItemID(),
                po.getItemName(),
                po.getQuantity(),
                po.getTotalPrice(),
                supplierFull,
                raisedBy,
                po.getDeliveryDate(),
                po.getStatus().toString(),
                "Edit",
                "Delete"
            });
        }

        PO_Table.setModel(model);
        // Set font and row height
        PO_Table.setFont(new java.awt.Font("Georgia", java.awt.Font.PLAIN, 14)); // Font type and size
        PO_Table.setRowHeight(25); // Row height

        // Set column widths 
        PO_Table.getColumnModel().getColumn(0).setPreferredWidth(70);  // PO ID
        PO_Table.getColumnModel().getColumn(1).setPreferredWidth(70);  // Item ID
        PO_Table.getColumnModel().getColumn(2).setPreferredWidth(100); // Item Name
        PO_Table.getColumnModel().getColumn(3).setPreferredWidth(60);  // Quantity
        PO_Table.getColumnModel().getColumn(4).setPreferredWidth(60);  // Total Price
        PO_Table.getColumnModel().getColumn(5).setPreferredWidth(150);  // Supplier
        PO_Table.getColumnModel().getColumn(6).setPreferredWidth(120);  // Emp ID
        PO_Table.getColumnModel().getColumn(7).setPreferredWidth(100); // Date
        PO_Table.getColumnModel().getColumn(8).setPreferredWidth(80);  // Status

        PO_Table.getTableHeader().setFont(new java.awt.Font("Georgia", java.awt.Font.BOLD, 12));
        PO_Table.getColumnModel().getColumn(8).setCellRenderer(new StatusCellRenderer());
        
        
        PO_Table.getColumnModel().getColumn(PO_Table.getColumnCount() - 2).setCellRenderer(new ButtonRenderer());
        PO_Table.getColumnModel().getColumn(PO_Table.getColumnCount() - 2).setCellEditor(new ButtonEditor(new JCheckBox(), this, "Edit"));
        
        PO_Table.getColumnModel().getColumn(PO_Table.getColumnCount() - 1).setCellRenderer(new ButtonRenderer());
        PO_Table.getColumnModel().getColumn(PO_Table.getColumnCount() - 1).setCellEditor(new ButtonEditor(new JCheckBox(), this, "Delete"));
        
    }
    
    
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
            setFont(new java.awt.Font("Georgia", Font.PLAIN, 12));
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }
    
    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private Purchase_POLists parent;
        private String action;

        public ButtonEditor(JCheckBox checkBox, Purchase_POLists parent, String action) {
            super(checkBox);
            this.parent = parent;
            this.action = action;
            button = new JButton();
            button.setOpaque(true);
            setFont(new java.awt.Font("Georgia", Font.PLAIN, 12));
            button.addActionListener(e -> fireEditingStopped());
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            label = (value == null) ? "" : value.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        public Object getCellEditorValue() {
            if (isPushed) {
                int selectedRow = parent.PO_Table.getSelectedRow();
                String poID = parent.PO_Table.getValueAt(selectedRow, 0).toString();
                String status = parent.PO_Table.getValueAt(selectedRow, 8).toString();

                if ("Delete".equals(action)) {
                    if ("Pending".equalsIgnoreCase(status)) {
                        parent.deletePO(poID);
                    } else {
                        JOptionPane.showMessageDialog(parent, "Only Pending POs can be deleted.");
                    }
                } else if ("Edit".equals(action)) {
                    if ("Pending".equalsIgnoreCase(status)) {
                        parent.editPO(poID);
                    } else {
                        JOptionPane.showMessageDialog(parent, "Only Pending POs can be edited.");
                    }
                }
            }
            isPushed = false;
            return label;
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
    
    public void editPO(String poID) {
        Purchase_EditPO PMeditPO = new Purchase_EditPO(ChangePanel, poID);  
        
        ChangePanel.removeAll();
        ChangePanel.setLayout(new BorderLayout());
        ChangePanel.add(PMeditPO, BorderLayout.CENTER);
        ChangePanel.revalidate();
        ChangePanel.repaint();
    }
    
    public void deletePO(String poID) {
        int choice = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete " + poID + "?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION
        );

        if (choice == JOptionPane.YES_OPTION) {
            try {
                Path filePath = Paths.get("PO_Lists.txt");
                List<String> lines = new ArrayList<>(Files.readAllLines(filePath));

                boolean found = false;
                Iterator<String> iterator = lines.iterator();
                while (iterator.hasNext()) {
                    String line = iterator.next().trim();
                    if (!line.isEmpty()) {
                        String[] parts = line.split(";");
                        if (parts.length > 0 && parts[0].equals(poID)) {
                            iterator.remove();
                            found = true;
                            break;
                        }
                    }
                }

                if (found) {
                    Files.write(filePath, lines, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);
                    JOptionPane.showMessageDialog(this, poID + " has been deleted.");
                    loadPOListFromFile();
                } else {
                    JOptionPane.showMessageDialog(this, "PO ID not found.");
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error deleting PO: " + e.getMessage());
            }
        } else {
            // User clicked "No", do nothing
            JOptionPane.showMessageDialog(this, "Deletion cancelled.");
        }
    }
    
    class StatusCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            String status = value != null ? value.toString().toLowerCase() : "";

            switch (status) {
                case "pending":
                    c.setBackground(Color.YELLOW); 
                    c.setForeground(Color.BLACK);
                    break;
                case "approved":
                    c.setBackground(Color.GREEN); 
                    c.setForeground(Color.BLACK);
                    break;
                default:
                    c.setBackground(new Color(240, 240, 240)); // Light Gray (default)
                    c.setForeground(Color.BLACK);
                    break;
            }

            if (isSelected) {
                c.setBackground(table.getSelectionBackground());
            }

            return c;
        }
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel POList_Label;
    private javax.swing.JTable PO_Table;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
