/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.PURCHASE;

import com.mycompany.OWSB.SALES.PR;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author cindy
 */
public class Purchase_PRLists extends javax.swing.JPanel {
    private javax.swing.JPanel ChangePanel;

    /**
     * Creates new form Purchase_PRLists
     */
    public Purchase_PRLists(javax.swing.JPanel ChangePanel) {
        this.ChangePanel = ChangePanel;
        initComponents();
        loadPRListFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PRLists_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PR_Table = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        PRLists_Label.setFont(new java.awt.Font("Comic Sans MS", 1, 30)); // NOI18N
        PRLists_Label.setText("Purchase Requisiton List");

        PR_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(PR_Table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(PRLists_Label)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(PRLists_Label)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void loadPRListFromFile() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[] {
            "PR ID", "Item", "Quantity", "Supplier", "Raised By", "Required Delivery Date", "Status", "Review"
        });
        
        Map<String, List<String>> itemToSupplierMap = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader("database/Supplier.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(";");
                    if (parts.length >= 7) {
                        String supplierID =parts[0];   
                        String supplierName =parts[1];
                        String itemFull =parts[6];
                        String[] itemParts = itemFull.split(":");
                        if (itemParts.length >= 1){
                            String itemID = itemParts[0].trim();
                            
                            String supplierEntry = supplierID + "-" + supplierName;
                            itemToSupplierMap
                                .computeIfAbsent(itemID, k -> new ArrayList<>())
                                .add(supplierEntry);
                            
                        }
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading Suppliers.txt: " + e.getMessage());
        }
        
        Map<String, String> empMap = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader("login.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(",");
                    if (parts.length >= 2) {
                        empMap.put(parts[0], parts[1]);   
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading login.txt: " + e.getMessage());
        }
        
        Map<String, String> itemMap = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader("database/Inventory.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(";");
                    if (parts.length >= 2) {
                        itemMap.put(parts[0], parts[1]);   
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading Items.txt: " + e.getMessage());
        }
        
        // Use the PR class PR.viewPRsInFile() method
        List<PR> prList = PR.viewPRsInFile(PR.PR_Status.PENDING);

        for (PR pr : prList) {
            String itemID = pr.getItemCode();
            String itemName = itemMap.getOrDefault(itemID, "Unknown");
            String itemFull = itemID + "-" + itemName;

            String empID = pr.getRaisedBy();
            String username = empMap.getOrDefault(empID, "Unknown");
            String raisedBy = empID + "-" + username;

            List<String> suppliers = itemToSupplierMap.getOrDefault(itemID, new ArrayList<>());
            String supplierHTML = "<html>" + String.join("<br>", suppliers) + "<html>";

            model.addRow(new Object[]{
                pr.getPRID(),
                itemFull,
                pr.getQuantity(),
                supplierHTML,
                raisedBy,
                pr.getDate().toString(),
                pr.getStatus().toString(),
                "Review"
            });
        }

        PR_Table.setModel(model);
        // Set font and row height
        PR_Table.setFont(new java.awt.Font("Georgia", java.awt.Font.PLAIN, 14)); // Font type and size
        PR_Table.setRowHeight(25); // Row height

        // Set column widths 
        PR_Table.getColumnModel().getColumn(0).setPreferredWidth(70);  // PR ID
        PR_Table.getColumnModel().getColumn(1).setPreferredWidth(100);  // Item
        PR_Table.getColumnModel().getColumn(2).setPreferredWidth(60); // Quantity
        PR_Table.getColumnModel().getColumn(3).setPreferredWidth(150); // Supplier
        PR_Table.getColumnModel().getColumn(4).setPreferredWidth(100);  // Raised By
        PR_Table.getColumnModel().getColumn(5).setPreferredWidth(80);  // Date 
        PR_Table.getColumnModel().getColumn(6).setPreferredWidth(80);  // Status
        PR_Table.getColumnModel().getColumn(7).setPreferredWidth(70);  // Review


        PR_Table.getTableHeader().setFont(new java.awt.Font("Georgia", java.awt.Font.BOLD, 12));
        
        
        PR_Table.getColumnModel().getColumn(PR_Table.getColumnCount() - 1).setCellRenderer(new Purchase_PRLists.ButtonRenderer());
        PR_Table.getColumnModel().getColumn(PR_Table.getColumnCount() - 1).setCellEditor(new Purchase_PRLists.ButtonEditor(new JCheckBox(), this, "Review"));

        for (int row = 0; row < PR_Table.getRowCount(); row++){
            int maxHeight = PR_Table.getRowHeight();
            
            for (int col = 0; col < PR_Table.getColumnCount(); col++){
                TableCellRenderer renderer = PR_Table.getCellRenderer(row, col);
                Component comp = PR_Table.prepareRenderer(renderer, row, col);
                int height = comp.getPreferredSize().height;
                maxHeight = Math.max(height, maxHeight);
            }
            
            PR_Table.setRowHeight(row, maxHeight);
        }
        
        
        
    }
    
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
            setFont(new java.awt.Font("Georgia", Font.PLAIN, 12));
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "Review" : value.toString());
            return this;
        }
    }
    
    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private JTable table;
        private Purchase_PRLists parent;
        private String action;

        public ButtonEditor(JCheckBox checkBox, Purchase_PRLists parent, String action) {
            super(checkBox);
            this.parent = parent;
            this.action = action;
            button = new JButton();
            button.setOpaque(true);
            setFont(new java.awt.Font("Georgia", Font.PLAIN, 12));
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            this.table = table;
            label = (value == null) ? "Review" : value.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                int selectedRow = table.getSelectedRow();
                
                String prID = table.getValueAt(selectedRow, 0).toString();
                String itemFull = table.getValueAt(selectedRow, 1).toString();
                String quantity = table.getValueAt(selectedRow, 2).toString();
                String raisedBy = table.getValueAt(selectedRow, 4).toString();
                String date = table.getValueAt(selectedRow, 5).toString();
                String status = table.getValueAt(selectedRow, 6).toString();
                
                javax.swing.JPanel reviewPR = new Purchase_ReviewPR(prID, itemFull, quantity, raisedBy, date, status, parent.ChangePanel);
                
                ChangePanel.removeAll();
                ChangePanel.setLayout(new BorderLayout());
                ChangePanel.add(reviewPR, BorderLayout.CENTER);
                ChangePanel.revalidate();
                ChangePanel.repaint();
                
                
            }
            isPushed = false;
            return label;
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        protected void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PRLists_Label;
    private javax.swing.JTable PR_Table;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
