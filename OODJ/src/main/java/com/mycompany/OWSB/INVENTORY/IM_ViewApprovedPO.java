/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.OWSB.INVENTORY;
import com.mycompany.OWSB.PURCHASE.PO;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ooijinghui
 */
public class IM_ViewApprovedPO extends javax.swing.JPanel {

    /**
     * Creates new form IM_ViewApprovedPO
     */
    public IM_ViewApprovedPO() {
        initComponents();
        loadApprovedPOs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Inventory_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        Inventory_Label.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        Inventory_Label.setText("Approved PO");

        jTable1.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO ID", "Item ID", "Item Name", "Quantity Delivered", "Total Prive", "Supplier Name", "Raised By", "Delivery Date", "Financial Approval Status", "Stock Arrived"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(Inventory_Label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(Inventory_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public void loadApprovedPOs() {
    List<PO> poList = PO.viewPOsInFile(); // Load all POs from file
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear table

    DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    for (PO po : poList) {
        if (po.getStatus() == PO.PO_Status.APPROVED) {
            String deliveryDate = po.getDeliveryDate();
            LocalDate today = LocalDate.now();
            LocalDate delivery;

            try {
                // Try to parse in both formats
                if (deliveryDate.contains("-") && deliveryDate.length() == 10) {
                    if (Character.isDigit(deliveryDate.charAt(2))) {
                        delivery = LocalDate.parse(deliveryDate, formatter2);
                    } else {
                        delivery = LocalDate.parse(deliveryDate, formatter1);
                    }
                } else {
                    delivery = LocalDate.parse(deliveryDate); // fallback
                }
            } catch (Exception e) {
                delivery = today.plusDays(1); // Treat as future date if unparseable
            }

            String stockArrived = delivery.isBefore(today) || delivery.isEqual(today) ? "Arrived" : "Pending";

            model.addRow(new Object[]{
                po.getPOID(),
                po.getItemID(),
                po.getItemName(),
                po.getQuantity(),
                po.getTotalPrice(),
                po.getSupplierID(),
                po.getRaisedBy(),
                po.getDeliveryDate(),
                po.getStatus().toString(),
                stockArrived
            });
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Inventory_Label;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
